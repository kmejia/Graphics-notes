Wireframe /Polygon Meshes

Wireframe{only has the 8 edges if this was a cube]
-3D objects are defines as the edges that connect the vertices/points
-works well with the existing edge matrix framework
Polygon Surfaces
-3D objects are defined as the surfaces(triangles or quadrilaterals) that
cover the object
-Move from edge matrix to polygon matrix
-allow us to see solid objects
-allow us to remove backfaces
polygon Matrix
p0	p3
    \
     \
p1	p2


edgeMatrix=[p0p1,,p1p2, p2p3..
triangleMatrix[p0p1p2,p2p3p0
for each polygon, draw
p0p1
p1p2
p2p0


{edge matrix}
-plot
-draw_line
-draw_lines
-add_point
{Polygon matrix} 
-plot
-draw_line
-draw_polygon**
-add_point
-add_polygon**

Polygon Meshes
points have to be entered in counterclockwise order
Box
//front
p0p1p2
p2p3p0
//back
p4p5p7 would be incorrect, it isn't counter-clockwise
p7p5p4
p7p6p5


Sphere
     0   
  7     1  
6         2
 5      3
     4

1,2, 12 \ 
         }i, i+1 ,i + n+1 
1,12,11 / i,i+n+1 , i + n    
4/5
removing backfaces

backface culling
-the process of remdering only the faces that are facing forward.
Sruface normal
-vector perpendicular to a certain plane
-is shows the directionn a surface is facing(n->) 
-the view vector/camera(V->) shows the direction of the observer

90<theta<270 will constitute a front face, then you have to drawthe surface
algorithm
1.calculate n->
2. find theta between surcafe normal and view vector
view vector is something you set, not calculate
3. if <90 theta <270, draw the polygon

calculate N->
	  -cross product of 2 vectors that share a common endpoint and
	  go in different directions
	  -works if points are counterclockwise
______________________________________________________________________
4/6
A X B =<aybz-AzBy ,
        AzBx-AzBz ,
	AxBy-AyBx >
N-> ==<Nx,Ny,Nz>

Find theta
theta
->
V=<0 , 0 , -1>

N* V = |N||V|cos(theta)
=NxVx+NyVy + NzVz
