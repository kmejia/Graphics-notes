===Image file formats

Compressed /                            Uncompressed
smaller                                      raw image
processing involved in viewing                data
 
jpg/jpeg                                bmp        
png                                     tiff        
webp                                    raw formats for digital formats         
gif                                             
Run-Length


Lossy    /                                 Lossless
loses some original info                   retains all original info
jpg                                        bmp 
                                           tiff
less data but tyhe same info??
GGGGGYYYRRRR

or...

5G3Y4R       Run-Length Encoding
this is not too good for sequences of length 1 
real life phoos do not benefit from this, too much variation

Raster   /                                
represented as a grid of pixels               
Vector
represented as a list of drawing instructions
.svg



Bresenham's Line Algortithm 

such as y = mx + b
inefficint: chack x and y's and see what fits
y = (dY / dX)x  + b
(dX) Y = (dY)X + (dX)B
0 = (dY)X -(dX)y + (dX)B
A = dY
B = -dX
C = (dX)  b
0 = Ax + By  + c
f(x,y) = 0

0: (x,y) is on the line

in graphics , split the grind into OCTANTS
-in octant 1 , slope is between 0 and 1

if a point is above octant 1, y is larger because B is lesser (neg.value)
< 0: (x,y) is above the line
> 0 : (x,y) is below the line


To draw a line: you need the endpoints
(x,y)
you have only 2 more options
1    --(x+1,y+1)
2    --(x+1 , y ) 
OR
*(x+1, y+1/2) /checking the midpoint



2/9

######
####.#
######
.#####

we need to figure out which pixels to stimulate this line
2 options:
(x + 1, y)
(x+ 1 , y+1)
we can test both OR look at the midpoint   mp.(x+1, y + [1/2])
its not a pixel, but a plot beqtween the pixels
calculate f(x+1 ,  y + 1/2) 
if: ==0, it's on the line. This means you can color either one
if: <0 : y is bigger than it should be [from the formula above] and midpt is ABOVE the line. coloe the bottom pixel (x+1 , y)
if > 0 : y value is too small, midpt is below the line, color in the pixel above (x+1,y+1)  

-First Draft algorithm, in pseudo code
(Xo , Yo) ->(x1,y1)
X = Xo
Y = Yo
while (x<= X1)
plot(x,y)
delta = f(x+1 ,y+ [1/2])
//now we need to check the cases
if (d>0)
	y+=1
x+=1

//..the calculation of delta seems inneficient
initial value of d
d = f(Xo + 1 , Yo + 1/2)
d = A(Xo +1)  B(Yo + 1/2) +  C
[expand]
d = AXo +BYo + C + A +1/2 B
we found f(Xo, Yo)
d=0+ A + 1/2 B
d = A + 1/2 B
-second Draft Algorithm

d = A + 1/2 B
while (x<= X1)
	plot (x,y)
	if (d > 0 )
	Y+=1
X+=1 
d = f(x+1 , y = 1/2)
if d < 0     .....
x -> x+1   
y-> y

f(x+1 , y )
d = A(x+1 ) + B y + c
d = Ax + By +C + A
d = d + A

if d> 0 
x->x+1 ,  y-> y+1
f(x+1, y+1)
d= Ax + Bx + C + A + B
d=A + B


-third draft:
d = A + 1/2 B
while (x<= X1)
        plot (x,y)
        if (d > 0 )
        Y+=1
	d +=B
X+=1 
d+=A
2/10
fixing the pesky 1/2
d = A + 1/2 B
2d = 2A + B

2d = 2d +2 A      OR 2d =2d +2A + 2B

therefore
____
d = 2A + B
while (x<= X1)
        plot (x,y)
        if (d > 0 )
        Y+=1
        d +=2B
X+=1
d+=2A
//this is the line algorithm for octant 1
Octant 2:  the slope is greater than 1, less than inf.
a < M
##.##
#####
#####
#####
.#### , here we check (x,y+1) and (x+1 , y+1)
where did we get initial d ?
f(Xo + 1/2, y+ 1 )
AXo+BYo+C + 1/2A + B
A = dY
B = - dX
d = A + 2B
while (y < Y1)
	plot(x,y)
	if(d<0)
	x+=1
	d+= 2 A
y+=1
	d+=2B





-octant 8
-1 < m < 0 

2/11
think about how you aare reppuing pixels
2D array
struct for pixels	


2/22
Using Matrices

draw a square and rectangle
        p1        p4      p5 
    p0        p2   p3     p6

with a list of points, it can get easier to rotate, shrink, etc.
point Matrix [  p0 p1 p2 p3 p4 p5 p6]

while ( i  < points.length)
      draw_line(points[i] , points[i + 1])
      i++
under this , some lines would be missing, and this would prodice a snake-like
image
there are also possible other ways toexpress this
shape matrix[[p0 p1 p2] [p3 p4 p5 p6]]
edge  matrix [ p0p1 ,p1p2 .....]
connection matrix 0 1 2 3
		0[f t t f ]
	   	1fttf
		2ttff
		3fftt

 x0 x1 x2 x3
[           ...         ]   
 y0 y1 y2 y3
 z0 z1 z2 z3...
 1  1  1  1 ...
  edges = new_matrix()
  add_edge(edges, p0 ,012)

....
	draw_lines(edges)
--------------------------------------------------------------
2/23
Matrix Math
- scalar multiplication, recall that s is just a number
    a  b         sa  sb
s *[     ]   = [         ]
    c  d         sc  sd
- matrix multiplication
m0*m1=/=m1*m0
# of columns in m0 = # of rows in m1
              1
[a b c]  *  [ 2 ]   = [1a +2b +3c]
              3
1 * 3     3  * 1
..the 2 inners must be the same
..2 outers make up the new matrix
[A*B][B*C] = [A*C]

  a b c    1 4        (1a+2b+3c) (4a+5b+6c)
[ d e f ] [2 5]  =   [ (1d+2e+3f) (4d+5e+6f)]
 g h i     3 6          (1g+2h+3i) (4g+5h+6i)

- matrix multiplicative identity
all values on the diagonal are 1, others are zero
square
[1 00  a 
010   [b]
001]   c

Graphics matrix
scaling
(x , y , z)S(a,b,c)   -> (ax, by, cz)
 a000   x           ax
 0b00   y           by
[00c0] [z]        =[cz]
 0001   1            1
-------------------------------------------------------------------
2/24
Scaling
(x , y , z)S(a,b,c)   -> (ax, by, cz)
  x
  y
[    ]
  z 
  1


 a000   x           ax
 0b00   y           by
[00c0] [z]        =[cz]
 0001   1            1

translating
(x,y,z) T(a,b,c) ----->(x+a, y+b,z+c)

  1000         x     x+a
  0100         y     y+b
[          ]  [ ] = [    ]
  0010         z     z+c
  0001         1      1
  //***//one of the important reasons why we keep the 1 in the bottom of the column

Rotating
(x,y,z)R(axis ,angle) --->( ?,? , ?)
ex: z axis --->(?,?,z)

y|
 | .(Xr,Yr)
 | /   _ .(x,Y)
 |/__/-___
use polar coordinate system
x=rcos(phi)
y=rsin(phi)

Xr =rcos(phi + theta)
   rcos(phi)cos(theta)-rsin(phi)sin(theta)
   xcos(theta) -ysin(theta)



[cos(theta) -sin(theta) 0 0]             x
sintheta costheta 0 0                   [y]    =  [xcostheta -ysintheta
0          0      1 0                    z         ycostheta +xsintheta
0          0      0 1                    1              z
                                                        1
