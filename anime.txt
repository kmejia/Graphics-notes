animation
loop needed, can be used in parser
Relative coordinate system
-currently we use a global coordinate system -each object is drawn with
respect to the same origin/coordinate system
P-> [1003   -> P(x+3)(Y+2)
     0102
     0020
     0001]

-in a relative Coordinate system, each object can have its own coordinate system
-WE will use a stack to store the varopus coordinate systems   
stack(last one in is the first one to pop off

Graphics Framework
A. Transformations are applied to the top of the stack
B. The stack will be pushed and popped as needed
C. Drawing pipeline:
   1 Generate points
   2 multiply points by stack top
   3 Draw the object to the screen
   4 Clear the point matrix

Command	   Stack     Image
	   I matrix  origin at bottom left
	   I
translate   To*I     origin at center
	I

box
x y z whd   To*I  square at the origin
	    I
translate   T1*To*I  Image with center above where the square is
xyz          T0*I
	     I


Sphere
x y z r		T1*To*I		sphere at the "new center"
        	 T0*I
	 	 I
pop		T0*I	new center becomes center pf the box[body]
		I


4/19
source code->compiler-> machine code
     '' ''  	-->1.Lexer ->2.parser -> semantic analyzer
     	->optimizer ->code generator ->""machine code

Lexer
-performs lexica analysis
-knows all valid tokens in the language
-generates a list of tokens
int main() {              int
long x=5+6;	             IDENT main		
printf("hi"); ====>>>>>>   (
return x;                   )
}                            long
                              x
			      =
			      5
			      +
			      6
			      ;

Parser
-parser syntax analysis
-knows the grammar of the language
-generates a syntax tree
	    -main
-tell you the order to do things in
4/20
this is what the output of the parser is
[tree]
->3 semantic analyser
.eventually this will turn into code aka computer's instructions
-knows what tokens map to computer operations
-Generates
	1)symbol table
	2)list of operations in the order they must be performed
>Symbol table
main f int
x    long
printf f int

>operaions list
+: 5,6
=: x,
printf ..
return : x

---->optimizer
recognozes paterna that can be done ina  different way
code generator will knwo what operatins ma to what proc4ssor instructions
generates thr program machine code


program tha makes a lexer: flex

5/3
[.   ]----->[_.   ]
in mdl: 400 0 0 {factor}
moving is repeated transformations
frame
0 move 400 0 0 ____0%(knob)
1 move 400 0 0 ____25%
2 move 400 0 0 ____50%
3 move 400 0 0 ____75%
4 move 400 0 0 ____100%
5 move 400 0 0 ____
new command: very {factor} 0 4 0 1
    	     	  	  start/endframe---start/end values
new mdl commands
-frames <N>
	-set the number of frames in the animation
	-must be an integer
-basename<S>
	-set the prefix	for all  frame filenames
vary <knob> <f0> <f1> <v0> <v1>
     -describe how the knob changes over time





